高度な継承 p409参照

継承をより高度に使うために
あいまいなクラスを残していくことも必要になる

フィールドやメソッドが共通した子クラスが存在したときに
同じ事を定義しているのは面倒なので
他の開発者がより安全に使える継承の材料となるものを作るようにする
この役割は未来に備える開発者の役割となる

ただこれには不具合が発生する p413

1 内容が確定できない
 継承される材料となるclassは確定をさせるとほかの子クラスにも影響を与えるため
 確定できないメソッド等が現れる

2 現実世界に対応したメソッド定義の必要性 p416
 継承された子クラスで定義していけばいいがヒューマンエラーが起こることもあるのでよくはない
この状態自体がオブジェクト指向に反しているのでＮＧである

3 もしclassメソッドの中身を空で渡したとしても
ヒューマンエラーである、オーバーライドのし忘れが起こる可能性もある
特にこの場合は親クラス自体で定義しているので継承された状態から呼び出すこともできる
のでエラーにならない
そもそも何もしないこと自体が正しいと認識されてしまう場合がある

4 コメントを書いたにしても読んでいなかった、スペルミス等での
  新しく似通ったメソッドを作ってしまう可能性もある


5 まちがってnewをされていしまいインスタンス化されてしまうこともあり得る
オブジェクト指向に乗っ取っている場合
完成されていないものがインスタンス化（実体化）されることがあってはならない
現状のコードでは継承を使うこともインスタンス化することもどちらもできる状態で
開発者はそれを自由に選ぶことができる状態である

★ この5つを解決するメソッドがabstractである p424

abstractは「あいまいな」を表すもので
内容の確定が出来ないものに使うことができる

基本の形

詳細未定のメソッド（抽象メソッド）を宣言
public abstract 戻り値 任意のメソッド名(引数リスト);

例
public class Hero{
    {}は付けないので注意
    public abstract void attack();
}

javaでは抽象クラスを含む場合下のクラス宣言をしなければならない
この定義の場合、インスタンス化をすることができない

基本の形
抽象メソッドを含む場合のclassの宣言 抽象クラスという

public abstract class クラス名{}

例
public abstract class Character{
    int hp;
    String name;

    public void run(){
        System.out.println("はしっています");
    }

    public abstract void attack();
}

abstractを親クラスとして継承された子クラスは
メソッドの定義をするか抽象化させるかの二つを選ぶ必要がある

例
public abstract class Dancer extends Character{
    int hp;
    String name;

    public void dance(){
        System.out.println("踊っています");
    }

    この場合は次のクラスにまた引き継がれていくので
    抽象化されているこの抽象メソッドがある場合、
    クラスも抽象クラスとなるのでインスタンス化することができなくなる
    public abstract void attack();

    オーバーライドとしてメソッドを正しく定義した場合は
    インスタンス化が可能
        public void attack(){
        System.out.println("たたかいます");
    }

}

あいまいな抽象クラスの中にもさらにあいまいな抽象クラスが存在する

キャラクターが抽象クラスならさらに広い範囲の抽象クラスである生き物のように

この特に抽象度の高い抽象クラスを
インターフェースと呼ぶ



インターフェースの特徴は二つ
基本的にフィールドを持たない事
もし持っている場合はその数は動かせない数
public static finalとなっている（省略可能）
すべてのメソッドは抽象メソッドであること

基本の形
インターフェースの宣言
public interface インターフェース名｛｝;

実際にインターフェースの中にメソッドを書く場合は
public abstractはいらないので省略できる

例
 public abstract void run()
    ↓
 void run()


インターフェースの実装の場合
implementsを使うのが実装方法である
基本の形
public class クラス名 implements インターフェース名{};

これをすることで子クラスたちにメソッド群の実装の強制化ができる

あるクラスがインターフェースを実装している場合は
少なくともそのインターフェイスが定めたメソッドは
持っていることが保証される


インターフェイスは特別に多重継承が認められている
理由は
いちばん初めの親の継承元なので多重継承をしても
メソッド同士の内容が衝突することがないから

子クラスであるものを継承する時、もし
親クラスが二つある場合は親クラスは同じメソッドを持っていた場合内容の衝突が起こるので
インターフェイスじゃない場合の多重継承は禁止とされている


インターフェイスの多重継承
基本の形

public  class クラス名 implements 親インターフェイス１,親インターフェイス２{};

インターフェイスを継承することも可能である p448
既存のインターフェイスを壊さず拡張させたインターフェイスを作ることもできる

public interface Human extends Creature{
    これらはabstract（抽象メソッド）より追加したもので
    void attack();
    void watch();
    ここにインターフェイスにあるrun()が追加されるようになる
}
implementsじゃないのは実装ではなく拡張だから

クラス定義の時にextendsとimplementsを両方使うこともある

基本の形
public class クラス名 extends 継承名 implements 親インターフェイス１,親インターフェイス２{};

例
public class Fool extends Character implements Human{
    Characterのフィールドとメソッドを継承
    継承されたものが抽象メソッドだった場合は定義
    public void attack(){~~~~};
    さらにHumanのインターフェイスから継承された抽象メソッドを実装
    void attack(){~~~~};
    void watch(){~~~~};
    void run(){~~~~};
}
java8からはインターフェイスも処理内容空ではなく
をいれることができる 詳細は p451